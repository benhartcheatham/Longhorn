This file is for planning out new features.

Processes:
    - Should have a stdin, stdout, and stderror stream
        - Might be better suited as files on the system
    - Array of threads owned by Process
        - Number of live threads
            - When number of live threads = 0, kill the process
    - Active thread in Process
    - Way to kill Processes
        - Way to kill threads within Process?
            - If calling thread isn't in process, kills the entire process?
            - Does killing a process kill its threads?
            - Can't kill init Process?
    - Parental Hierarchy between Processes?
    - Idle Process
        - may want to put and idle thread in the init process instead
    - List of Processes
        - Using a sorted insert cuts time to find a process in half (O(n/2))
        - May want to cap the num processes and just use an array for fast access, could also use a hash map

    When File I/O is Added:
    - Pointer to the stack segment
        - Each thread should have it's own stack in this segment
        - Each thread saves state when swapping
    - Pointer to the text segment
    - Pointer to the data segment

Threads:
    - Per Thread:
        - Way to save state
        - Parent process Pointer
            - Threads are stored in parent process Array
            - Thread stacks are palloc'ed
        - Priority
        - Name
    - Thread switching
    - Current thread Pointer
    - Dying Thread Pointer
    - List of all threads for scheduling
    - Timer interrupt in thread.c? (Probably)

Standard Streams:
    - Have keyboard write to stdin
    - Have stdin and stdout be directed to the active process
    - Active process should print stdout to the screen
    - Maybe have a boolean flag in std streams that allows immediate response from active process?
        - If enabled, writes to the stream will jump to a function given by the active process
        - If disabled, active process has to write/read from streams when in it's timeslice


    