
Formatting Files
----------------
.c:  
    - Functions should be declared in the order that they are declared in the .h file (if applicable)  
    - Global variables should be before function implementations  
    - Includes should be at the top of the file  
        - std library includes should be first  
        - includes should be grouped based on file path (ex: ../drivers/ and ../libc/ files should be grouped seperately)  
.h:  
    - Each .h file should have an include guard  
    - Each section should be denoted by a comment before the section starts and should be in the order below  
    - Sections  
        - includes  
        - defines  
        - structs  
            - enums, unions, etc. should also be defined here  
        - typedefs  
        - functions  
            - highly encouraged to group functions based on what they do (e.g. functions for modifying mem grouped together)  

Naming Conventions
------------------
structs:
    - all lower case, words seperated by _
    - Do not use the syntactic sugar for typedefs in .h files
      put the typedef in the typedefs section
typedefs:
    - TODO
defines/macros:
    - all uppercase
constants:
    - if it's global, all uppercase, otherwise name it's up to you
variables:
    - all lower case, words seperated by _
    - pointer variables should be written type *name, not type* name
        - this includes struct variables (struct type *name)
functions:
    - all lower case, words seperated by _
    - functions with no parameters should be written as foo(), not foo(void)
        - This doesn't apply for function pointers or function pointer typedefs
    - functions with pointer return types should be written type *foo(), not type* foo()
    - system initializer functions (like the ones that initialize threads and processes) should be named
      init_<system>(), whereas initializer functions for structs/types should be named <system>_init()
    - function names should start with the file/system they belong to (this is only preferred)
comments:
    - multiline comments should be marked with /* */
        - the content of the comment should start on the same column over multiple lines, ex.:
            /* this is
               a comment */
    - single line comments in functions can be marked with // or /* */, though /* */ is preferred
    - comments explaining functions should be directly above the function and be in /* */
file names:
    - all lowercase, no spaces, all words seperated by a _
assembly:
    - comments should be at the end of the line
    - use Intel syntax
